pragma Singleton

import QtQuick
import qs.core as Services

/**
 * Theme - Semantic color and styling abstraction layer
 * Wraps the matugen-generated ColorScheme with semantic names
 * This makes it easy to change colors without touching components
 */
QtObject {
    id: root
    
    // Reference to the color scheme (generated by matugen)
    property var colors: Services.Color
    
    // ========================================
    // Surface Colors (by elevation)
    // ========================================
    function surface(elevation) {
        switch(elevation) {
            case 0: return colors.surface
            case 1: return colors.surface_container_low
            case 2: return colors.surface_container
            case 3: return colors.surface_container_high
            case 4: return colors.surface_container_highest
            default: return colors.surface
        }
    }
    
    // ========================================
    // Semantic Surface Colors
    // ========================================
    readonly property color surface: colors.surface
    readonly property color surfaceBase: colors.surface
    readonly property color surfaceVariant: colors.surface_variant
    readonly property color surfaceElevated: colors.surface_container_high
    readonly property color surfaceHighest: colors.surface_container_highest
    readonly property color surfaceDisabled: Qt.rgba(colors.surface.r, colors.surface.g, colors.surface.b, 0.38)
    
    // Cards and floating elements
    readonly property color cardBackground: colors.surface_container_high
    readonly property color cardBorder: colors.outline_variant
    
    // Pills and chips
    readonly property color pillBackground: colors.surface_container_highest
    
    // ========================================
    // Text Colors
    // ========================================
    readonly property color textPrimary: colors.on_surface
    readonly property color textSecondary: colors.on_surface_variant
    readonly property color textOnPrimary: colors.on_primary
    readonly property color textOnPrimaryContainer: colors.on_primary_container
    readonly property color textDisabled: Qt.rgba(colors.on_surface.r, colors.on_surface.g, colors.on_surface.b, 0.38)
    
    // ========================================
    // Accent Colors
    // ========================================
    readonly property color primary: colors.primary
    readonly property color accent: colors.primary
    readonly property color accentContainer: colors.primary_container
    readonly property color accentSecondary: colors.secondary
    readonly property color accentSecondaryContainer: colors.secondary_container
    
    // ========================================
    // State Colors
    // ========================================
    readonly property color stateActive: colors.primary
    readonly property color stateInactive: colors.surface_container_highest
    readonly property color stateHover: colors.secondary_container
    readonly property color stateMuted: colors.on_surface_variant
    
    // ========================================
    // Border Colors
    // ========================================
    readonly property color outline: colors.outline
    readonly property color borderDefault: colors.outline_variant
    readonly property color borderStrong: colors.outline
    
    // ========================================
    // Special Colors
    // ========================================
    readonly property color error: colors.error
    readonly property color errorContainer: colors.error_container
    readonly property color onError: colors.on_error
    
    // ========================================
    // Dimensions (from Settings, exposed here for convenience)
    // ========================================
    readonly property int cardRadius: 12
    readonly property int pillRadius: 12
    readonly property int borderWidth: 0
}
